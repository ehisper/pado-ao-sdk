import { createDataItemSigner } from "@permaweb/aoconnect";
import { THRESHOLD_2_3 } from "./algorithm";
import { submit } from "./processes/tasks";
import { readFileSync } from "node:fs";
import { NODE_NAMES } from "./config";
import { exit } from "node:process";

//TODO:
const taskType = "ZKLHEDataSharing";
const computeLimit = "9000000000000";
const memoryLimit = "512M";

/**
 * Submit a task to AO
 *
 * @param dataId - The data id
 * @param dataUserPk - The user's public key generated by keygen
 * @param wallet - The ar wallet
 * @returns The submited task id
 */
export const submitTask = async (dataId: string, dataUserPk: string, wallet: any): Promise<string> => {
  const signer = createDataItemSigner(wallet);
  let inputData = { ...THRESHOLD_2_3, dataId: dataId, consumerPk: dataUserPk };
  const taskId = await submit(taskType, dataId, JSON.stringify(inputData),
    computeLimit, memoryLimit, NODE_NAMES, signer);
  return taskId;
}

async function test() {
  setTimeout(async () => {
    const args = process.argv.slice(2)
    if (args.length < 3) {
      console.log("args: <dataId> <keyfile> <walletpath>");
      exit(2);
    }
    let dataId = args[0];
    let keyfile = args[1];
    let walletpath = args[2];

    const key = JSON.parse(readFileSync(keyfile).toString());
    const wallet = JSON.parse(readFileSync(walletpath).toString());

    console.log(`dataId=${dataId}`);
    const taskId = await submitTask(dataId, key.pk, wallet);
    console.log(`TASKID=${taskId}`);
  }, 1000)
}
test();
